{"ast":null,"code":"import _objectSpread from\"/Users/xavier/mon-anki-perso/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{useState,useEffect}from'react';import HomeView from'./components/HomeView';import LibraryView from'./components/LibraryView';import QuizView from'./components/QuizView';import ReviewView from'./components/ReviewView';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function App(){const[currentView,setCurrentView]=useState('home');const[allCards,setAllCards]=useState([]);const[itemsData,setItemsData]=useState({});const[quizQuestions,setQuizQuestions]=useState([]);const[isLoading,setIsLoading]=useState(false);const[currentItemForQuiz,setCurrentItemForQuiz]=useState(null);const[quizHistory,setQuizHistory]=useState({});// --- FONCTIONS DE DONNÉES (COMPLÈTES ET RESTAURÉES) ---\nconst loadInitialData=async()=>{try{const[cardsRes,itemsDataRes]=await Promise.all([fetch('/api/cards'),fetch('/api/items-data')]);if(!cardsRes.ok||!itemsDataRes.ok){throw new Error('Erreur serveur');}setAllCards(await cardsRes.json());setItemsData(await itemsDataRes.json());console.log(\"Données chargées !\");}catch(e){console.error(\"Erreur chargement:\",e);}};useEffect(()=>{loadInitialData();},[]);const handleSaveItemData=async(item,text)=>{try{await fetch('/api/items-data',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({item,text})});await loadInitialData();alert('Texte enregistré !');}catch(e){alert('Échec de la sauvegarde.');}};const handleGenerateCards=async(item,text)=>{setIsLoading(true);try{const response=await fetch('/api/generate-cards',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({item,text})});if(!response.ok)throw new Error('Erreur serveur génération cartes.');const result=await response.json();alert(result.message);await loadInitialData();}catch(error){console.error(error);alert(\"Impossible de générer les cartes.\");}finally{setIsLoading(false);}};const handleCardUpdate=async updatedCard=>{const newCardsList=allCards.map(card=>card.id===updatedCard.id?updatedCard:card);setAllCards(newCardsList);try{await fetch('/api/cards',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(newCardsList)});}catch(e){console.error(\"Échec sauvegarde carte:\",e);}};const handleStartQuiz=(questions,item)=>{setQuizQuestions(questions);setCurrentItemForQuiz(item);navigateTo('quiz');};const handleQuizComplete=results=>{console.log(\"Quiz terminé ! Résultats pour l'item :\",currentItemForQuiz,results);setQuizHistory(prevHistory=>_objectSpread(_objectSpread({},prevHistory),{},{[currentItemForQuiz]:results}));};const navigateTo=view=>setCurrentView(view);// --- Rendu des vues ---\nconst renderCurrentView=()=>{if(isLoading){return/*#__PURE__*/_jsx(\"div\",{id:\"loading-spinner\"});}switch(currentView){case'review':return/*#__PURE__*/_jsx(ReviewView,{navigateTo:navigateTo,allCards:allCards,onUpdateCards:handleCardUpdate});case'library':return/*#__PURE__*/_jsx(LibraryView,{navigateTo:navigateTo,allCards:allCards,itemsData:itemsData,onStartQuiz:handleStartQuiz,onSetLoading:setIsLoading,onGenerateCards:handleGenerateCards});case'quiz':return/*#__PURE__*/_jsx(QuizView,{navigateTo:navigateTo,questions:quizQuestions,onQuizComplete:handleQuizComplete});case'manage':return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Page de Gestion\"}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>navigateTo('home'),children:\"\\u2190 Accueil\"})]});case'home':default:return/*#__PURE__*/_jsx(HomeView,{navigateTo:navigateTo,allCards:allCards,itemsData:itemsData,onSaveItem:handleSaveItemData});}};return/*#__PURE__*/_jsx(\"div\",{className:\"AppContainer\",children:renderCurrentView()});}export default App;","map":{"version":3,"names":["React","useState","useEffect","HomeView","LibraryView","QuizView","ReviewView","jsx","_jsx","jsxs","_jsxs","App","currentView","setCurrentView","allCards","setAllCards","itemsData","setItemsData","quizQuestions","setQuizQuestions","isLoading","setIsLoading","currentItemForQuiz","setCurrentItemForQuiz","quizHistory","setQuizHistory","loadInitialData","cardsRes","itemsDataRes","Promise","all","fetch","ok","Error","json","console","log","e","error","handleSaveItemData","item","text","method","headers","body","JSON","stringify","alert","handleGenerateCards","response","result","message","handleCardUpdate","updatedCard","newCardsList","map","card","id","handleStartQuiz","questions","navigateTo","handleQuizComplete","results","prevHistory","_objectSpread","view","renderCurrentView","onUpdateCards","onStartQuiz","onSetLoading","onGenerateCards","onQuizComplete","children","onClick","onSaveItem","className"],"sources":["/Users/xavier/mon-anki-perso/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport HomeView from './components/HomeView';\nimport LibraryView from './components/LibraryView';\nimport QuizView from './components/QuizView';\nimport ReviewView from './components/ReviewView';\n\nfunction App() {\n  const [currentView, setCurrentView] = useState('home');\n  const [allCards, setAllCards] = useState([]);\n  const [itemsData, setItemsData] = useState({});\n  const [quizQuestions, setQuizQuestions] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [currentItemForQuiz, setCurrentItemForQuiz] = useState(null);\n  const [quizHistory, setQuizHistory] = useState({});\n\n  // --- FONCTIONS DE DONNÉES (COMPLÈTES ET RESTAURÉES) ---\n\n  const loadInitialData = async () => {\n    try {\n      const [cardsRes, itemsDataRes] = await Promise.all([ fetch('/api/cards'), fetch('/api/items-data') ]);\n      if (!cardsRes.ok || !itemsDataRes.ok) { throw new Error('Erreur serveur'); }\n      setAllCards(await cardsRes.json());\n      setItemsData(await itemsDataRes.json());\n      console.log(\"Données chargées !\");\n    } catch (e) { console.error(\"Erreur chargement:\", e); }\n  };\n\n  useEffect(() => { loadInitialData(); }, []);\n\n  const handleSaveItemData = async (item, text) => {\n    try {\n      await fetch('/api/items-data', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ item, text }) });\n      await loadInitialData();\n      alert('Texte enregistré !');\n    } catch (e) { alert('Échec de la sauvegarde.'); }\n  };\n\n  const handleGenerateCards = async (item, text) => {\n    setIsLoading(true);\n    try {\n      const response = await fetch('/api/generate-cards', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ item, text }),\n      });\n      if (!response.ok) throw new Error('Erreur serveur génération cartes.');\n      const result = await response.json();\n      alert(result.message);\n      await loadInitialData();\n    } catch (error) {\n      console.error(error);\n      alert(\"Impossible de générer les cartes.\");\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  \n  const handleCardUpdate = async (updatedCard) => {\n    const newCardsList = allCards.map(card => card.id === updatedCard.id ? updatedCard : card);\n    setAllCards(newCardsList);\n    try {\n      await fetch('/api/cards', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(newCardsList) });\n    } catch (e) { console.error(\"Échec sauvegarde carte:\", e); }\n  };\n  \n  const handleStartQuiz = (questions, item) => {\n    setQuizQuestions(questions);\n    setCurrentItemForQuiz(item);\n    navigateTo('quiz');\n  };\n\n  const handleQuizComplete = (results) => {\n    console.log(\"Quiz terminé ! Résultats pour l'item :\", currentItemForQuiz, results);\n    setQuizHistory(prevHistory => ({\n      ...prevHistory,\n      [currentItemForQuiz]: results\n    }));\n  };\n\n  const navigateTo = (view) => setCurrentView(view);\n\n  // --- Rendu des vues ---\n  const renderCurrentView = () => {\n    if (isLoading) { return <div id=\"loading-spinner\"></div>; }\n    \n    switch (currentView) {\n      case 'review':\n        return <ReviewView navigateTo={navigateTo} allCards={allCards} onUpdateCards={handleCardUpdate} />;\n      case 'library':\n        return <LibraryView navigateTo={navigateTo} allCards={allCards} itemsData={itemsData} onStartQuiz={handleStartQuiz} onSetLoading={setIsLoading} onGenerateCards={handleGenerateCards} />;\n      case 'quiz':\n        return <QuizView navigateTo={navigateTo} questions={quizQuestions} onQuizComplete={handleQuizComplete} />;\n      case 'manage':\n        return (<div><h2>Page de Gestion</h2><button onClick={() => navigateTo('home')}>← Accueil</button></div>);\n      case 'home':\n      default:\n        return <HomeView navigateTo={navigateTo} allCards={allCards} itemsData={itemsData} onSaveItem={handleSaveItemData} />;\n    }\n  };\n\n  return ( <div className=\"AppContainer\">{renderCurrentView()}</div> );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}