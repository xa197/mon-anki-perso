{"ast":null,"code":"import React,{useState,useEffect}from'react';import HomeView from'./components/HomeView';import LibraryView from'./components/LibraryView';import QuizView from'./components/QuizView';import ReviewView from'./components/ReviewView';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function App(){const[currentView,setCurrentView]=useState('home');const[allCards,setAllCards]=useState([]);const[itemsData,setItemsData]=useState({});const[quizQuestions,setQuizQuestions]=useState([]);const[isLoading,setIsLoading]=useState(false);// --- Fonctions de chargement et de sauvegarde ---\nconst loadInitialData=async()=>{try{const[cardsRes,itemsDataRes]=await Promise.all([fetch('/api/cards'),fetch('/api/items-data')]);if(!cardsRes.ok||!itemsDataRes.ok){throw new Error('Erreur serveur');}setAllCards(await cardsRes.json());setItemsData(await itemsDataRes.json());}catch(e){console.error(\"Erreur chargement:\",e);}};useEffect(()=>{loadInitialData();},[]);const handleSaveItemData=async(item,text)=>{try{await fetch('/api/items-data',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({item,text})});await loadInitialData();// Recharge les données après sauvegarde\nalert('Texte enregistré !');}catch(e){alert('Échec.');}};const handleGenerateCards=async(item,text)=>{setIsLoading(true);try{const response=await fetch('/api/generate-cards',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({item,text})});if(!response.ok)throw new Error('Erreur serveur génération cartes.');const result=await response.json();alert(result.message);await loadInitialData();// Recharge les données après génération\n}catch(error){console.error(error);alert(\"Impossible de générer les cartes.\");}finally{setIsLoading(false);}};const handleCardUpdate=async updatedCard=>{const newCardsList=allCards.map(card=>card.id===updatedCard.id?updatedCard:card);setAllCards(newCardsList);// Met à jour l'état local immédiatement pour la réactivité\ntry{await fetch('/api/cards',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(newCardsList)});}catch(e){console.error(\"Échec sauvegarde carte:\",e);}};// --- Rendu des vues ---\nconst renderCurrentView=()=>{if(isLoading){return/*#__PURE__*/_jsx(\"div\",{id:\"loading-spinner\"});}switch(currentView){case'review':return/*#__PURE__*/_jsx(ReviewView,{navigateTo:setCurrentView,allCards:allCards,onUpdateCards:handleCardUpdate});case'library':return/*#__PURE__*/_jsx(LibraryView,{navigateTo:setCurrentView,allCards:allCards,itemsData:itemsData,onSetQuiz:setQuizQuestions,onSetLoading:setIsLoading,onGenerateCards:handleGenerateCards});case'quiz':return/*#__PURE__*/_jsx(QuizView,{navigateTo:setCurrentView,questions:quizQuestions});case'manage':return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Page de Gestion\"}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>setCurrentView('home'),children:\"\\u2190 Accueil\"})]});case'home':default:return/*#__PURE__*/_jsx(HomeView,{navigateTo:setCurrentView,allCards:allCards,itemsData:itemsData,onSaveItem:handleSaveItemData});}};return/*#__PURE__*/_jsx(\"div\",{className:\"AppContainer\",children:renderCurrentView()});}export default App;","map":{"version":3,"names":["React","useState","useEffect","HomeView","LibraryView","QuizView","ReviewView","jsx","_jsx","jsxs","_jsxs","App","currentView","setCurrentView","allCards","setAllCards","itemsData","setItemsData","quizQuestions","setQuizQuestions","isLoading","setIsLoading","loadInitialData","cardsRes","itemsDataRes","Promise","all","fetch","ok","Error","json","e","console","error","handleSaveItemData","item","text","method","headers","body","JSON","stringify","alert","handleGenerateCards","response","result","message","handleCardUpdate","updatedCard","newCardsList","map","card","id","renderCurrentView","navigateTo","onUpdateCards","onSetQuiz","onSetLoading","onGenerateCards","questions","children","onClick","onSaveItem","className"],"sources":["/Users/xavier/mon-anki-perso/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport HomeView from './components/HomeView';\nimport LibraryView from './components/LibraryView';\nimport QuizView from './components/QuizView';\nimport ReviewView from './components/ReviewView';\n\nfunction App() {\n  const [currentView, setCurrentView] = useState('home');\n  const [allCards, setAllCards] = useState([]);\n  const [itemsData, setItemsData] = useState({});\n  const [quizQuestions, setQuizQuestions] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  // --- Fonctions de chargement et de sauvegarde ---\n  const loadInitialData = async () => {\n    try {\n      const [cardsRes, itemsDataRes] = await Promise.all([ fetch('/api/cards'), fetch('/api/items-data') ]);\n      if (!cardsRes.ok || !itemsDataRes.ok) { throw new Error('Erreur serveur'); }\n      setAllCards(await cardsRes.json());\n      setItemsData(await itemsDataRes.json());\n    } catch (e) { console.error(\"Erreur chargement:\", e); }\n  };\n\n  useEffect(() => { loadInitialData(); }, []);\n\n  const handleSaveItemData = async (item, text) => {\n    try {\n      await fetch('/api/items-data', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify({ item, text }) });\n      await loadInitialData(); // Recharge les données après sauvegarde\n      alert('Texte enregistré !');\n    } catch (e) { alert('Échec.'); }\n  };\n\n  const handleGenerateCards = async (item, text) => {\n    setIsLoading(true);\n    try {\n      const response = await fetch('/api/generate-cards', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ item, text }),\n      });\n      if (!response.ok) throw new Error('Erreur serveur génération cartes.');\n\n      const result = await response.json();\n      alert(result.message);\n      await loadInitialData(); // Recharge les données après génération\n    } catch (error) {\n      console.error(error);\n      alert(\"Impossible de générer les cartes.\");\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleCardUpdate = async (updatedCard) => {\n    const newCardsList = allCards.map(card => card.id === updatedCard.id ? updatedCard : card);\n    setAllCards(newCardsList); // Met à jour l'état local immédiatement pour la réactivité\n    try {\n      await fetch('/api/cards', { method: 'POST', headers: { 'Content-Type': 'application/json' }, body: JSON.stringify(newCardsList) });\n    } catch (e) { console.error(\"Échec sauvegarde carte:\", e); }\n  };\n\n  // --- Rendu des vues ---\n  const renderCurrentView = () => {\n    if (isLoading) { return <div id=\"loading-spinner\"></div>; }\n    \n    switch (currentView) {\n      case 'review':\n        return <ReviewView navigateTo={setCurrentView} allCards={allCards} onUpdateCards={handleCardUpdate} />;\n      case 'library':\n        return <LibraryView navigateTo={setCurrentView} allCards={allCards} itemsData={itemsData} onSetQuiz={setQuizQuestions} onSetLoading={setIsLoading} onGenerateCards={handleGenerateCards} />;\n      case 'quiz':\n        return <QuizView navigateTo={setCurrentView} questions={quizQuestions} />;\n      case 'manage': \n        return (<div><h2>Page de Gestion</h2><button onClick={() => setCurrentView('home')}>← Accueil</button></div>);\n      case 'home':\n      default:\n        return <HomeView navigateTo={setCurrentView} allCards={allCards} itemsData={itemsData} onSaveItem={handleSaveItemData} />;\n    }\n  };\n\n  return ( <div className=\"AppContainer\">{renderCurrentView()}</div> );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}