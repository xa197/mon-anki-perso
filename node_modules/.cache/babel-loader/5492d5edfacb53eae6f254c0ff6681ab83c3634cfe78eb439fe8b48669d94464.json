{"ast":null,"code":"var _jsxFileName = \"/Users/xavier/mon-anki-perso/src/components/QuizView.js\",\n  _s = $RefreshSig$();\n// Contenu complet pour QuizView.js - Copiez et remplacez tout votre fichier\n\nimport React, { useState } from 'react';\n\n// Fonction utilitaire pour comparer deux tableaux de réponses sans tenir compte de l'ordre\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst areArraysEqual = (arr1, arr2) => {\n  if (arr1.length !== arr2.length) return false;\n  const sortedArr1 = [...arr1].sort();\n  const sortedArr2 = [...arr2].sort();\n  return sortedArr1.every((value, index) => value === sortedArr2[index]);\n};\nfunction QuizView({\n  questions,\n  onQuizEnd\n}) {\n  _s();\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  // On utilise un tableau pour stocker les réponses sélectionnées (au lieu d'une seule chaîne)\n  const [selectedAnswers, setSelectedAnswers] = useState([]);\n  const [feedback, setFeedback] = useState('');\n  const [score, setScore] = useState(0);\n  const [quizFinished, setQuizFinished] = useState(false);\n  // Nouvel état pour savoir si l'utilisateur a validé sa réponse pour la question actuelle\n  const [isAnswerSubmitted, setIsAnswerSubmitted] = useState(false);\n  if (!questions || questions.length === 0) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"quiz-view\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Erreur\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Aucune question n'a pu \\xEAtre g\\xE9n\\xE9r\\xE9e.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 27,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onQuizEnd,\n        children: \"Retour\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 7\n    }, this);\n  }\n\n  // On renomme la clé \"answer\" en \"answers\" pour correspondre au nouveau format\n  const currentQuestion = questions[currentQuestionIndex];\n  // Mesure de sécurité si l'API renvoie accidentellement \"answer\" au lieu de \"answers\"\n  const correctAnswers = currentQuestion.answers || [currentQuestion.answer];\n\n  // Gère la sélection/désélection des cases à cocher\n  const handleOptionChange = option => {\n    setSelectedAnswers(prevAnswers => {\n      if (prevAnswers.includes(option)) {\n        return prevAnswers.filter(item => item !== option); // Désélectionner\n      } else {\n        return [...prevAnswers, option]; // Sélectionner\n      }\n    });\n  };\n\n  // Logique de validation lors du clic sur \"Valider\"\n  const handleSubmitAnswer = () => {\n    setIsAnswerSubmitted(true);\n    const isCorrect = areArraysEqual(selectedAnswers, correctAnswers);\n    if (isCorrect) {\n      setFeedback('Bonne réponse !');\n      setScore(s => s + 1);\n    } else {\n      setFeedback(`Mauvaise réponse. La ou les bonne(s) réponse(s) était(ent) : ${correctAnswers.join(', ')}`);\n    }\n  };\n\n  // Passe à la question suivante\n  const handleNextQuestion = () => {\n    if (currentQuestionIndex < questions.length - 1) {\n      setSelectedAnswers([]);\n      setFeedback('');\n      setIsAnswerSubmitted(false);\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\n    } else {\n      setQuizFinished(true);\n    }\n  };\n  if (quizFinished) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"quiz-results-view\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Quiz Termin\\xE9 !\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Votre score est de : \", score, \" / \", questions.length]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onQuizEnd,\n        children: \"Retour\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    id: \"quiz-view\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"quiz-header\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: onQuizEnd,\n        children: \"\\u2190 Quitter\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Quiz\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"quiz-progress-bar\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"quiz-progress-value\",\n        style: {\n          width: `${(currentQuestionIndex + 1) / questions.length * 100}%`\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      id: \"quiz-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        id: \"quiz-question-text\",\n        children: currentQuestion.question\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"quiz-options-container\",\n        className: \"checkbox-container\",\n        children: currentQuestion.options.map((option, index) => {\n          let labelClass = '';\n          // Logique pour le feedback visuel après validation\n          if (isAnswerSubmitted) {\n            if (correctAnswers.includes(option)) {\n              labelClass = 'correct'; // C'est une bonne réponse\n            } else if (selectedAnswers.includes(option)) {\n              labelClass = 'incorrect'; // C'est une mauvaise réponse que l'utilisateur a cochée\n            }\n          }\n          return /*#__PURE__*/_jsxDEV(\"label\", {\n            className: `checkbox-label ${labelClass}`,\n            children: [/*#__PURE__*/_jsxDEV(\"input\", {\n              type: \"checkbox\",\n              checked: selectedAnswers.includes(option),\n              onChange: () => handleOptionChange(option),\n              disabled: isAnswerSubmitted\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 110,\n              columnNumber: 17\n            }, this), option]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"quiz-feedback\",\n        children: feedback\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 122,\n        columnNumber: 9\n      }, this), !isAnswerSubmitted && /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"submit-answer-btn\",\n        onClick: handleSubmitAnswer,\n        disabled: selectedAnswers.length === 0,\n        children: \"Valider\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 32\n      }, this), isAnswerSubmitted && /*#__PURE__*/_jsxDEV(\"button\", {\n        id: \"next-question-btn\",\n        onClick: handleNextQuestion,\n        children: \"Question suivante \\u2192\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 31\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 93,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this);\n}\n_s(QuizView, \"QCDLczMQjwU57QDElQJ4V2Ju4GI=\");\n_c = QuizView;\nexport default QuizView;\nvar _c;\n$RefreshReg$(_c, \"QuizView\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","areArraysEqual","arr1","arr2","length","sortedArr1","sort","sortedArr2","every","value","index","QuizView","questions","onQuizEnd","_s","currentQuestionIndex","setCurrentQuestionIndex","selectedAnswers","setSelectedAnswers","feedback","setFeedback","score","setScore","quizFinished","setQuizFinished","isAnswerSubmitted","setIsAnswerSubmitted","id","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","currentQuestion","correctAnswers","answers","answer","handleOptionChange","option","prevAnswers","includes","filter","item","handleSubmitAnswer","isCorrect","s","join","handleNextQuestion","className","style","width","question","options","map","labelClass","type","checked","onChange","disabled","_c","$RefreshReg$"],"sources":["/Users/xavier/mon-anki-perso/src/components/QuizView.js"],"sourcesContent":["// Contenu complet pour QuizView.js - Copiez et remplacez tout votre fichier\n\nimport React, { useState } from 'react';\n\n// Fonction utilitaire pour comparer deux tableaux de réponses sans tenir compte de l'ordre\nconst areArraysEqual = (arr1, arr2) => {\n  if (arr1.length !== arr2.length) return false;\n  const sortedArr1 = [...arr1].sort();\n  const sortedArr2 = [...arr2].sort();\n  return sortedArr1.every((value, index) => value === sortedArr2[index]);\n};\n\nfunction QuizView({ questions, onQuizEnd }) {\n  const [currentQuestionIndex, setCurrentQuestionIndex] = useState(0);\n  // On utilise un tableau pour stocker les réponses sélectionnées (au lieu d'une seule chaîne)\n  const [selectedAnswers, setSelectedAnswers] = useState([]);\n  const [feedback, setFeedback] = useState('');\n  const [score, setScore] = useState(0);\n  const [quizFinished, setQuizFinished] = useState(false);\n  // Nouvel état pour savoir si l'utilisateur a validé sa réponse pour la question actuelle\n  const [isAnswerSubmitted, setIsAnswerSubmitted] = useState(false);\n\n  if (!questions || questions.length === 0) {\n    return (\n      <div id=\"quiz-view\">\n        <h2>Erreur</h2>\n        <p>Aucune question n'a pu être générée.</p>\n        <button onClick={onQuizEnd}>Retour</button>\n      </div>\n    );\n  }\n\n  // On renomme la clé \"answer\" en \"answers\" pour correspondre au nouveau format\n  const currentQuestion = questions[currentQuestionIndex];\n  // Mesure de sécurité si l'API renvoie accidentellement \"answer\" au lieu de \"answers\"\n  const correctAnswers = currentQuestion.answers || [currentQuestion.answer];\n\n  // Gère la sélection/désélection des cases à cocher\n  const handleOptionChange = (option) => {\n    setSelectedAnswers(prevAnswers => {\n      if (prevAnswers.includes(option)) {\n        return prevAnswers.filter(item => item !== option); // Désélectionner\n      } else {\n        return [...prevAnswers, option]; // Sélectionner\n      }\n    });\n  };\n\n  // Logique de validation lors du clic sur \"Valider\"\n  const handleSubmitAnswer = () => {\n    setIsAnswerSubmitted(true);\n    const isCorrect = areArraysEqual(selectedAnswers, correctAnswers);\n\n    if (isCorrect) {\n      setFeedback('Bonne réponse !');\n      setScore(s => s + 1);\n    } else {\n      setFeedback(`Mauvaise réponse. La ou les bonne(s) réponse(s) était(ent) : ${correctAnswers.join(', ')}`);\n    }\n  };\n\n  // Passe à la question suivante\n  const handleNextQuestion = () => {\n    if (currentQuestionIndex < questions.length - 1) {\n      setSelectedAnswers([]);\n      setFeedback('');\n      setIsAnswerSubmitted(false);\n      setCurrentQuestionIndex(currentQuestionIndex + 1);\n    } else {\n      setQuizFinished(true);\n    }\n  };\n\n  if (quizFinished) {\n    return (\n      <div id=\"quiz-results-view\">\n        <h2>Quiz Terminé !</h2>\n        <p>Votre score est de : {score} / {questions.length}</p>\n        <button onClick={onQuizEnd}>Retour</button>\n      </div>\n    );\n  }\n\n  return (\n    <div id=\"quiz-view\">\n      <div className=\"quiz-header\">\n        <button onClick={onQuizEnd}>← Quitter</button>\n        <h2>Quiz</h2>\n      </div>\n      <div id=\"quiz-progress-bar\">\n        <div id=\"quiz-progress-value\" style={{ width: `${((currentQuestionIndex + 1) / questions.length) * 100}%` }}></div>\n      </div>\n      <div id=\"quiz-container\">\n        <p id=\"quiz-question-text\">{currentQuestion.question}</p>\n        \n        {/* On utilise des cases à cocher (checkbox) au lieu de boutons */}\n        <div id=\"quiz-options-container\" className=\"checkbox-container\">\n          {currentQuestion.options.map((option, index) => {\n            let labelClass = '';\n            // Logique pour le feedback visuel après validation\n            if (isAnswerSubmitted) {\n              if (correctAnswers.includes(option)) {\n                labelClass = 'correct'; // C'est une bonne réponse\n              } else if (selectedAnswers.includes(option)) {\n                labelClass = 'incorrect'; // C'est une mauvaise réponse que l'utilisateur a cochée\n              }\n            }\n            return (\n              <label key={index} className={`checkbox-label ${labelClass}`}>\n                <input\n                  type=\"checkbox\"\n                  checked={selectedAnswers.includes(option)}\n                  onChange={() => handleOptionChange(option)}\n                  disabled={isAnswerSubmitted}\n                />\n                {option}\n              </label>\n            );\n          })}\n        </div>\n        \n        <div id=\"quiz-feedback\">{feedback}</div>\n        \n        {/* On affiche \"Valider\" avant la validation, et \"Question suivante\" après */}\n        {!isAnswerSubmitted && <button id=\"submit-answer-btn\" onClick={handleSubmitAnswer} disabled={selectedAnswers.length === 0}>Valider</button>}\n        {isAnswerSubmitted && <button id=\"next-question-btn\" onClick={handleNextQuestion}>Question suivante →</button>}\n\n      </div>\n    </div>\n  );\n}\n\nexport default QuizView;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}