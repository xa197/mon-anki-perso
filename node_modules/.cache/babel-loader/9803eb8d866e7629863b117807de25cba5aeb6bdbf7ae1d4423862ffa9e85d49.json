{"ast":null,"code":"import React,{useState,useEffect}from'react';// On reçoit maintenant allCards et itemsData en plus de navigateTo\nimport{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";function HomeView(_ref){let{navigateTo,allCards,itemsData}=_ref;// --- GESTION DE L'ÉTAT DU COMPOSANT ---\n// On crée des états pour se souvenir de ce que l'utilisateur a sélectionné\nconst[selectedItem,setSelectedItem]=useState('');const[workshopText,setWorkshopText]=useState('');// --- PRÉPARATION DES DONNÉES ---\n// On recrée la logique pour avoir la liste unique des \"items\" (decks)\nconst sortedItems=Array.from(new Set(allCards.map(c=>c.deck).filter(Boolean))).sort();// --- EFFETS ---\n// Cet \"effet\" se déclenche chaque fois que l'utilisateur change l'item sélectionné.\n// C'est l'équivalent de votre ancien addEventListener('change', ...)\nuseEffect(()=>{if(selectedItem&&itemsData[selectedItem]){setWorkshopText(itemsData[selectedItem]);}else{setWorkshopText('');}},[selectedItem,itemsData]);// Se relance si selectedItem ou itemsData change\n// --- LOGIQUE MÉTIER ---\n// La fonction à appeler quand on clique sur \"Enregistrer\"\nconst handleSaveWorkshopText=async()=>{if(!selectedItem){alert('Veuillez choisir un item.');return;}try{await fetch('/api/items-data',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({item:selectedItem,text:workshopText})});// Idéalement, il faudrait aussi mettre à jour l'état `itemsData` dans App.js\nalert('Texte enregistré !');}catch(e){alert('Échec de la sauvegarde.');}};// --- AFFICHAGE (RENDER) ---\nreturn/*#__PURE__*/_jsx(\"div\",{id:\"home-view\",children:/*#__PURE__*/_jsxs(\"div\",{className:\"home-container\",children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Mon Anki Perso\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"home-actions\",children:[/*#__PURE__*/_jsx(\"button\",{onClick:()=>navigateTo('review'),className:\"home-btn\",children:\"R\\xE9viser les cartes\"}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>navigateTo('manage'),className:\"home-btn\",children:\"Ajouter des cartes\"}),/*#__PURE__*/_jsx(\"button\",{onClick:()=>navigateTo('library'),className:\"home-btn\",children:\"Consulter la Biblioth\\xE8que\"})]}),/*#__PURE__*/_jsxs(\"div\",{className:\"workshop-container\",children:[/*#__PURE__*/_jsx(\"h2\",{children:\"Atelier de cr\\xE9ation rapide\"}),/*#__PURE__*/_jsx(\"p\",{children:\"Choisissez un item pour y ajouter rapidement des notes.\"}),/*#__PURE__*/_jsxs(\"div\",{className:\"workshop-form\",children:[/*#__PURE__*/_jsxs(\"select\",{value:selectedItem,onChange:e=>setSelectedItem(e.target.value),children:[/*#__PURE__*/_jsx(\"option\",{value:\"\",children:\"-- Choisir un item --\"}),sortedItems.map(item=>/*#__PURE__*/_jsx(\"option\",{value:item,children:item},item))]}),/*#__PURE__*/_jsx(\"textarea\",{value:workshopText,onChange:e=>setWorkshopText(e.target.value),placeholder:\"Collez vos phrases ou notes ici...\"}),/*#__PURE__*/_jsx(\"button\",{onClick:handleSaveWorkshopText,children:\"Enregistrer le texte\"})]})]})]})});}export default HomeView;","map":{"version":3,"names":["React","useState","useEffect","jsx","_jsx","jsxs","_jsxs","HomeView","_ref","navigateTo","allCards","itemsData","selectedItem","setSelectedItem","workshopText","setWorkshopText","sortedItems","Array","from","Set","map","c","deck","filter","Boolean","sort","handleSaveWorkshopText","alert","fetch","method","headers","body","JSON","stringify","item","text","e","id","children","className","onClick","value","onChange","target","placeholder"],"sources":["/Users/xavier/mon-anki-perso/src/components/HomeView.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\n\n// On reçoit maintenant allCards et itemsData en plus de navigateTo\nfunction HomeView({ navigateTo, allCards, itemsData }) {\n  \n  // --- GESTION DE L'ÉTAT DU COMPOSANT ---\n  // On crée des états pour se souvenir de ce que l'utilisateur a sélectionné\n  const [selectedItem, setSelectedItem] = useState('');\n  const [workshopText, setWorkshopText] = useState('');\n\n  // --- PRÉPARATION DES DONNÉES ---\n  // On recrée la logique pour avoir la liste unique des \"items\" (decks)\n  const sortedItems = Array.from(new Set(allCards.map(c => c.deck).filter(Boolean))).sort();\n\n  // --- EFFETS ---\n  // Cet \"effet\" se déclenche chaque fois que l'utilisateur change l'item sélectionné.\n  // C'est l'équivalent de votre ancien addEventListener('change', ...)\n  useEffect(() => {\n    if (selectedItem && itemsData[selectedItem]) {\n      setWorkshopText(itemsData[selectedItem]);\n    } else {\n      setWorkshopText('');\n    }\n  }, [selectedItem, itemsData]); // Se relance si selectedItem ou itemsData change\n\n  // --- LOGIQUE MÉTIER ---\n  // La fonction à appeler quand on clique sur \"Enregistrer\"\n  const handleSaveWorkshopText = async () => {\n    if (!selectedItem) {\n      alert('Veuillez choisir un item.');\n      return;\n    }\n    try {\n      await fetch('/api/items-data', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ item: selectedItem, text: workshopText })\n      });\n      // Idéalement, il faudrait aussi mettre à jour l'état `itemsData` dans App.js\n      alert('Texte enregistré !');\n    } catch (e) {\n      alert('Échec de la sauvegarde.');\n    }\n  };\n\n  // --- AFFICHAGE (RENDER) ---\n  return (\n    <div id=\"home-view\">\n        <div className=\"home-container\">\n            <h1>Mon Anki Perso</h1>\n            <div className=\"home-actions\">\n                <button onClick={() => navigateTo('review')} className=\"home-btn\">Réviser les cartes</button>\n                <button onClick={() => navigateTo('manage')} className=\"home-btn\">Ajouter des cartes</button>\n                <button onClick={() => navigateTo('library')} className=\"home-btn\">Consulter la Bibliothèque</button> \n            </div>\n            <div className=\"workshop-container\">\n                <h2>Atelier de création rapide</h2>\n                <p>Choisissez un item pour y ajouter rapidement des notes.</p>\n                <div className=\"workshop-form\">\n                    {/* On lie la valeur du select à notre état `selectedItem` */}\n                    {/* et on met à jour l'état avec `onChange` */}\n                    <select value={selectedItem} onChange={(e) => setSelectedItem(e.target.value)}>\n                        <option value=\"\">-- Choisir un item --</option>\n                        {/* On utilise .map() pour créer une <option> pour chaque item */}\n                        {sortedItems.map(item => (\n                            <option key={item} value={item}>{item}</option>\n                        ))}\n                    </select>\n\n                    {/* On fait pareil pour la zone de texte */}\n                    <textarea \n                      value={workshopText} \n                      onChange={(e) => setWorkshopText(e.target.value)}\n                      placeholder=\"Collez vos phrases ou notes ici...\"\n                    />\n                    \n                    {/* On lie le clic du bouton à notre fonction de sauvegarde */}\n                    <button onClick={handleSaveWorkshopText}>Enregistrer le texte</button>\n                </div>\n            </div>\n        </div>\n    </div>\n  );\n}\n\nexport default HomeView;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}